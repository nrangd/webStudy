<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
	<!--
		# XML 
		
		- 데이터를 효율적으로 보관하기 위한 문자열 구조, HTML과 같은 마크업 언어에 속한다 
		- HTML과 같은 마크업 언어에 속한다
		- 데이터를 XML형태로 만들어두면 다른 프로그램에서도 이 정보를 활용할 수 있다
		  (데이터 보관 방식의 표준 중 하나)
		
		# web.xml
		
		- 톰캣 서버가 실행될 때 이곳에 적혀있는 여러 설정들을 읽어들인 후 반영하여 실행한다
	-->
  <display-name>chap05</display-name>
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
  
  
	<!-- 
		# @WebServlet() 어노테이션 대신 web.xml에서 URL 매핑하기
		
		(1) 매핑하고 싶은 서블릿(.java) 또는 JSP(.jsp)를 web.xml에 등록한다
			<servlet> : 등록하고 싶은 서블릿의 범위
			<servlet-name> : 등록할 서블릿을 지칭할 이름을 지정한다 (web.xml에서 적용됨)
			<servlet-class> : 등록하고 싶은 서블릿이 .java인 경우 패키지 경로를 등록한다
			<jsp-file> : 등록하고 싶은 서블릿이 .jsp인 경우 webapp 밑의 경로를 등록한다
		(2) 등록한 서블릿에 매핑할 URL을 설정한다
		
			<servlet-mapping> : 서블릿 매핑
			<servlet-name> : 서블릿을 등록할 때 만들어놓은 이름을 사용
			<url-pattern> : 어떤 주소를 해당 서블릿으로 보낼것인지 설정
	 -->
	 
	<servlet>
		<servlet-name>myServlet1</servlet-name>
		<servlet-class>chap05.servlet.MyServlet</servlet-class>
	</servlet>
	
	<servlet>
		<servlet-name>myJsp1</servlet-name>
		<jsp-file>/pages/a.jsp</jsp-file>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>myServlet1</servlet-name>
		<url-pattern>/myserv</url-pattern>
	</servlet-mapping>
	
	<servlet-mapping>
		<servlet-name>myServlet1</servlet-name>
		<url-pattern>/myservlet</url-pattern>
	</servlet-mapping>
	 
	<servlet-mapping>
		<servlet-name>myJsp1</servlet-name>
		<url-pattern>/a</url-pattern>
	</servlet-mapping>
	 
	 <!-- 
	 	사용자가 접속 경로를 알아내서 마음대로 파일에 접근하는것을 방지하기 위해
	 	정해진 경로대로 접속하게 만들고 싶다면 /WEB-INF/ 폴더를 활용하는 것이 좋다
	 	※ WEB-INF 밑의 모든 자원은 파일 경로를 통해 접그하는것이 불가능하다
	  -->
	  
	<servlet>
		<servlet-name>myJsp2</servlet-name>
		<jsp-file>/WEB-INF/b.jsp</jsp-file>
	</servlet>
	 
	 <!-- URL에는 실제 경로와 아무 상관없는 URL을 매핑시켜서 실제 파일 위치를 숨길 수 있다 -->
	<servlet-mapping>
		<servlet-name>myJsp2</servlet-name>
		<url-pattern>/b</url-pattern>
	</servlet-mapping>
	 
	 <!-- 
	 	# 특수 기능을 가진 url-pattern들
	 	
	 	* : 모든 요청
	 	/path/* : 해당 경로 아래의 모든 요청
	 	*.hello : 확장자가 .hello인 모든 요청
	 	/ : 매핑에 걸리지 않은 모든 요청 (else 역할)
	  -->
	<servlet-mapping>
		<servlet-name>myJsp2</servlet-name>
		<url-pattern>/testing/*</url-pattern>
	</servlet-mapping>
	
	<servlet-mapping>
		<servlet-name>myJsp2</servlet-name>
		<url-pattern>*.profile</url-pattern>
	</servlet-mapping>

	<!-- 
		# web.xml에서 초기화 파라미터 설정하기
		
		- 서블릿에서 사용할 변수들을 web.xml에서 미리 등록해놓을 수 있다.
		- 소스코드에 포함시키고 싶지 않은 여러 설정들을 web.xml에 등록하여
		  서버가 켜질때 함께 초기화 되도록 만들어 줄 수 있다.
		- 해당 서블릿 내부에서만 사용할 지역 파라미터는 <servlet>내부에 <init-param>으로 등록한다.
		- 모든 서블릿에서 사용할 전역 파라미터는 <context-param>으로 등록한다.
	 -->
	<context-param>
		<param-name>resource_path</param-name>
		<param-value>/resources</param-value>
	</context-param>
	
	<context-param>
		<param-name>ceo_name</param-name>
		<param-value>김철수</param-value>
	</context-param>

	<!-- 매핑에 걸리지 않은 모든 요청은 elseServlet에서 처리하겠다는 뜻 -->
	
	<servlet>
		<servlet-name>elseServlet</servlet-name>
		<servlet-class>chap05.servlet.ElseServlet</servlet-class>
		<init-param>
			<param-name>debug_mode</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>db_account</param-name>
			<param-value>hr</param-value>
		</init-param>
		<init-param>
			<param-name>db_password</param-name>
			<param-value>1234</param-value>
		</init-param>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>elseServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
</web-app>
